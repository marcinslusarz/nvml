#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2018-2020, Intel Corporation
#
#
# pmempool_sync_remote/TEST28 -- pmempool sync with remote replication
#                                and bad block recovery files:
#                                - the pool consists of 3 parts
#                                - bad block in the 2nd part: offset: 0 length: 8*512
#                                (it is similar to TEST24)
#

. ../unittest/unittest.sh

require_test_type medium
require_fs_type any
require_build_type debug nondebug
require_linked_with_ndctl $PMEMPOOL$EXESUFFIX

require_nodes 2

setup

set -x

require_node_libfabric 0 $RPMEM_PROVIDER
require_node_libfabric 1 $RPMEM_PROVIDER

init_rpmem_on_node 0 1

require_node_log_files 0 pmemobj$UNITTEST_NUM.log
require_node_log_files 0 pmempool$UNITTEST_NUM.log

LAYOUT="layout"
LOG=out${UNITTEST_NUM}.log
rm -f $LOG && touch $LOG

POOLSET_LOCAL="local_pool.set"
POOLSET_REMOTE="remote_pool.set"
RECOVERY_FILE_P0=$DIR/${POOLSET_LOCAL}_r0_p0_badblocks.txt
RECOVERY_FILE_P1=$DIR/${POOLSET_LOCAL}_r0_p1_badblocks.txt
RECOVERY_FILE_P2=$DIR/${POOLSET_LOCAL}_r0_p2_badblocks.txt

create_poolset $DIR/$POOLSET_LOCAL \
	8M:${NODE_DIR[0]}/pool.local.part.0:x \
	8M:${NODE_DIR[0]}/pool.local.part.1:x \
	8M:${NODE_DIR[0]}/pool.local.part.2:x \
	M \
	${NODE_ADDR[1]}:$POOLSET_REMOTE

create_poolset $DIR/$POOLSET_REMOTE \
	24M:${NODE_DIR[1]}/pool.remote:x

# create the recovery files
create_recovery_file $RECOVERY_FILE_P0
create_recovery_file $RECOVERY_FILE_P1 0 1
create_recovery_file $RECOVERY_FILE_P2

copy_files_to_node 0 ${NODE_DIR[0]} $DIR/$POOLSET_LOCAL
copy_files_to_node 1 ${NODE_DIR[1]} $DIR/$POOLSET_REMOTE

expect_normal_exit run_on_node 0 ../pmempool rm -sf ${NODE_DIR[0]}$POOLSET_LOCAL
expect_normal_exit run_on_node 0 "perf record -o $PWD/perf.data -gR ../obj_verify ${NODE_DIR[0]}$POOLSET_LOCAL $LAYOUT c v"

expect_normal_exit run_on_node 0 "perf script -i $PWD/perf.data > $PWD/script"
expect_normal_exit run_on_node 0 "$PWD/../../../FlameGraph/stackcollapse-perf.pl < $PWD/script > collapsed"
expect_normal_exit run_on_node 0 "$PWD/../../../FlameGraph/flamegraph.pl < $PWD/collapsed > $PWD/res.svg"

expect_normal_exit run_on_node 1 "perf script -i /tmp/rpmemd-perf.data > $PWD/script"
expect_normal_exit run_on_node 1 "$PWD/../../../FlameGraph/stackcollapse-perf.pl < $PWD/script > collapsed"
expect_normal_exit run_on_node 1 "$PWD/../../../FlameGraph/flamegraph.pl < $PWD/collapsed > $PWD/res2.svg"

#curl -k --trace-ascii crl --data-urlencode "content@res.svg" --data "expiration=day" --data "syntax=text" --data "poster=test" https://paste.ubuntu.com | dd bs=1
#grep Location crl >&2 || true
#grep "Download as text" crl >&2 || true

md5sum $PWD/res.svg >&2
dd if=$PWD/res.svg bs=1 >&2

md5sum $PWD/res2.svg >&2
dd if=$PWD/res2.svg bs=1 >&2

#dd if=crl bs=1 >&2

#echo "beginning of svg" >&2
#echo "xxx" >&2
#cat $PWD/res.svg >&2
#echo "end of svg" >&2

#echo "beginning of svg2" >&2
#cat $PWD/res.svg >&2
#echo "end of svg2" >&2

sync
#sleep 15
#sync

###############################################################################
# Enabling features in poolsets with remote replicas is not supported now,
# so we have to use the following workaround to enable
# the POOL_FEAT_CHECK_BAD_BLOCKS compat feature in such poolset.
# We create the auxiliary poolset without the remote replica
# and enable this compat feature on all nodes separately.

create_poolset $DIR/${POOLSET_LOCAL}_aux \
	8M:${NODE_DIR[0]}/pool.local.part.0:x \
	8M:${NODE_DIR[0]}/pool.local.part.1:x \
	8M:${NODE_DIR[0]}/pool.local.part.2:x

copy_files_to_node 0 ${NODE_DIR[0]} $DIR/${POOLSET_LOCAL}_aux

turn_on_checking_bad_blocks_node 0 ${NODE_DIR[0]}/${POOLSET_LOCAL}_aux
turn_on_checking_bad_blocks_node 1 ${NODE_DIR[1]}/${POOLSET_REMOTE}

###############################################################################

# inject bad block:
expect_normal_exit run_on_node 0 "dd if=/dev/zero of=${NODE_DIR[0]}/pool.local.part.1 bs=512 seek=0 count=8 conv=notrunc status=none"

# copy the recovery files
copy_files_to_node 0 ${NODE_DIR[0]} $RECOVERY_FILE_P0 $RECOVERY_FILE_P1 $RECOVERY_FILE_P2

expect_abnormal_exit run_on_node 0 "../obj_verify ${NODE_DIR[0]}$POOLSET_LOCAL $LAYOUT v &>> $LOG"
expect_normal_exit run_on_node 0 "../pmempool sync -b -v ${NODE_DIR[0]}$POOLSET_LOCAL &>> $LOG"
expect_normal_exit run_on_node 0 "../obj_verify ${NODE_DIR[0]}$POOLSET_LOCAL $LAYOUT v &>> $LOG"

pass
